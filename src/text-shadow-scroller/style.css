@import 'normalize.css' layer(normalize);

@layer normalize, base, demo;

@layer demo {
  @property --scroll {
    initial-value: 0;
    inherits: true;
    syntax: '<number>';
  }
  @property --scrub {
    initial-value: 0;
    inherits: true;
    syntax: '<number>';
  }

  html {
    color-scheme: dark only;
  }
  h1 {
    font-weight: 900;
    font-size: clamp(2rem, 8vw + 1rem, 12rem);
    text-shadow: 0 2px red, 0 4px green;
    margin: 1rem;
  }
  h1::after {
    content: 'Cool';
    translate: 0 calc(var(--v, 0) * 10%);
  }
  main {
    height: 100vh;
    display: grid;
    place-items: center;
    align-content: end;
  }
  body {
    min-height: 200vh;
    align-content: start;
  }

  .scrub--velocity {
    position: fixed;
    top: 1rem;
    right: 1rem;
    animation-timeline: scroll();
    background: hsl(0 0% 20%);
  }
  .velocity-bar {
    --velocity: clamp(
      0,
      max(
        calc(var(--scroll) - var(--scrub)),
        calc(-1 * (var(--scroll) - var(--scrub)))
      ),
      25
    );
    transition: --scrub 0.15s ease;
    height: 1rem;
    width: 10rem;
    background: linear-gradient(
      270deg,
      hsl(140 80% 50%),
      hsl(45 80% 50%),
      hsl(10 80% 50%)
    );
    transform-origin: 0 50%;
    --clip: calc((100 - (var(--velocity) * 4)) * 1%);
    clip-path: inset(0 0 0 var(--clip));
  }

  .scrub--velocity::after {
    content: 'velocity';
    top: 120%;
    right: 0;
    position: absolute;
    color: hsl(0 0% 98%);
    font-weight: 300;
  }
}

@layer base {
  *,
  *:after,
  *:before {
    box-sizing: border-box;
  }

  body {
    display: grid;
    place-items: center;
    min-height: 100vh;
    font-family: 'SF Pro Text', 'SF Pro Icons', 'AOS Icons', 'Helvetica Neue',
      Helvetica, Arial, sans-serif, system-ui;
  }

  body::before {
    --size: 45px;
    --line: color-mix(in lch, canvasText, transparent 70%);
    content: '';
    height: 100vh;
    width: 100vw;
    position: fixed;
    background: linear-gradient(
          90deg,
          var(--line) 1px,
          transparent 1px var(--size)
        )
        50% 50% / var(--size) var(--size),
      linear-gradient(var(--line) 1px, transparent 1px var(--size)) 50% 50% /
        var(--size) var(--size);
    mask: linear-gradient(-20deg, transparent 50%, white);
    top: 0;
    transform-style: flat;
    pointer-events: none;
    z-index: -1;
  }

  .bear-link {
    color: canvasText;
    position: fixed;
    top: 1rem;
    left: 1rem;
    width: 48px;
    aspect-ratio: 1;
    display: grid;
    place-items: center;
    opacity: 0.8;
  }

  :where(.x-link, .bear-link):is(:hover, :focus-visible) {
    opacity: 1;
  }

  .bear-link svg {
    width: 75%;
  }

  /* Utilities */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }
}
