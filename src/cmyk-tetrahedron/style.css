@import "normalize.css";

*,
*:after,
*:before {
	box-sizing: border-box;
	transform-style: preserve-3d;
}

:root {
}

body {
	display: grid;
	place-items: center;
	min-height: 100vh;
	font-family:  "SF Pro Text", "SF Pro Icons", "AOS Icons", "Helvetica Neue", Helvetica, Arial, sans-serif, system-ui;
  background: hsl(var(--bg));
  transition: background 0.2s;
}

/*body::before {
	content: "";
	position: fixed;
	height: 20vmin;
	aspect-ratio: 1;
	background: hsl(280 80% 50% / 0.15);
	translate: -50% -50%;
	top: 50%;
	left: 50%;
}*/

* {
  box-sizing: border-box;
}

:root {
  --bg: 0 0% 98%;
  --color: 0 0% 22%;
  --width: calc(var(--size) * 1px);
  /* Use CSS trigonometric functions... */
  --meet: calc((90deg - acos(1/3)));
  --point: calc(sqrt(pow(100, 2) - pow(50, 2)));
  --height: calc(var(--width) * (var(--point) / 100));
  --offset: calc((100 - var(--point)) * 1);
  --center-x: calc(((0 + 100 + 50) / 3) * 1%);
  --center-y: calc(
  	(
  		(
  			(100) +
  			0 +
  			(100)
  		)
  		/ 3
  	) * 1
  );
  --projection: calc(((100 - var(--center-y)) / 100) * var(--height));
}

/* Line up the center of this with the center of the wrapper */
.t {
  width: var(--width);
  height: var(--height);
  aspect-ratio: 1;
  transition: background 0.2s;
  position: absolute;
  top: 50%;
  left: 50%;
  translate: -50% calc(-100% + ((200 / 3) * 0.5%));
/*  translate: -50% -50%;*/
  transform-origin: 50% 100%;
  filter: brightness(2);
/*  outline: 4px dashed red;*/
	/* Reusable transform on the sides */
	transform:
		rotateY(var(--ry, 0deg))
		rotateX(var(--rx, 0deg))
	  translate3d(var(--tx, 0), var(--ty, 0), var(--projection))
	  rotateX(var(--meet));

}
.t::before {
  mix-blend-mode: difference;
	content: "";
	position: absolute;
	inset: 0;
	background: var(--bg);
	clip-path: polygon(0 100%, 50% 0, 100% 100%);
}

.wrapper {
	width: var(--width);
	aspect-ratio: 1;
  position: relative;
  transform-origin: 50% 50%;
  transform: rotateX(-24deg) rotateY(24deg);
}

.wrap {
	height: var(--height);
	width: var(--width);
	position: relative;
	top: 50%;
	left: 50%;
	translate: -50% -50%;
}

.wrap--x {
  animation: showcase calc(var(--speed) * 1s) infinite linear;
}

.wrap--y {
	transform:
		rotateX(calc(var(--x, 0) * 1deg))
		rotateY(calc(var(--y, 0) * 1deg))
		rotateZ(calc(var(--z, 0) * 1deg));
}

@keyframes showcase {
	0% {
		transform:
			rotateX(0deg)
			rotateY(0deg)
			rotateZ(0deg);
	}
	100% {
		transform:
			rotateX(0deg)
			rotateY(360deg)
			rotateZ(0deg);
	}
}

.wrapper::after {
	content: "";
	height: 2vmin;
	border-radius: 50%;
	aspect-ratio: 1;
	background: hsl(0 0% 50%);
	position: absolute;
	top: 50%;
	left: 50%;
	translate: -50% -50%;
	z-index: -1;
}
.t::after {
	content: "";
	position: absolute;
	top: calc(var(--center-y) * 1%);
	left: 50%;
	height: 1vmin;
	aspect-ratio: 1;
	border-radius: 50%;
	background: red;
	translate: -50% -50%;
}

/* Reference triangle */
.t:nth-of-type(1) {
	--bg: hsl(40 100% 50% / 0);
}

.t:nth-of-type(2) {
	--bg: hsl(10 100% 50% / 0.5);
	--rx: 90deg;
	--ty: calc((100 - var(--center-y)) * 1%);
	--meet: 0;
	--projection: 0;
}

.t:nth-of-type(3) {
/*	opacity: 0;*/
	--bg: hsl(210 100% 50% / 0.5);
}

.t:nth-of-type(4) {
	--bg: hsl(280 100% 50% / 0.5);
	--ry: 120deg;
}

.t:nth-of-type(5) {
	--bg: hsl(140 100% 50% / 0.5);
	--ry: -120deg;
}

@media(prefers-color-scheme: dark) {
  :root {
    --bg: 0 0% 2%;
    --color: 0 0% 6%;
  }
}