@import "normalize.css";

@import url('https://fonts.googleapis.com/css2?family=EB+Garamond:ital,wght@0,400..800;1,400..800&display=swap');

*,
*:after,
*:before {
	box-sizing: border-box;
}

:root {
	--accent: hsl(35 90% 50%);
	--card-size: clamp(220px, 25vmin + 1rem, 480px);
}

body {
	display: grid;
	place-items: center;
	min-height: 100vh;
	font-family:  "SF Pro Text", "SF Pro Icons", "AOS Icons", "Helvetica Neue", Helvetica, Arial, sans-serif, system-ui;
}

body::before {
	--line: color-mix(in lch, canvasText 25%, transparent);
	--size: 60px;
	content: '';
	height: 100vh;
	width: 100vw;
	position: fixed;
	background: linear-gradient(
				90deg,
				var(--line) 1px,
				transparent 1px var(--size)
			)
			0 -5vmin / var(--size) var(--size),
		linear-gradient(var(--line) 1px, transparent 1px var(--size)) 0 -5vmin / var(
				--size
			) var(--size);
	mask: linear-gradient(-15deg, transparent 60%, white);
	top: 0;
	z-index: -1;
}

h1 {
	display: grid;
	font-family: 'EB Garamond', serif;
	font-weight: 600;
	font-size: clamp(3rem, 4vw + 1rem, 8rem);
	text-align: center;
	line-height: 0.9;
	text-wrap: balance;
}

h2 {
	font-family: 'EB Garamond', serif;
	font-weight: 600;
	font-size: clamp(2rem, 3vw + 1rem, 8rem);
	text-align: center;
	line-height: 0.9;
	text-wrap: balance;
}

h1 span:first-of-type {
	font-variant: small-caps;
	font-size: 0.4em;
	font-weight: 800;
	color: var(--accent);
}

header {
	min-height: 80vh;
	display: grid;
	place-items: center;
}

section {
	min-height: 80vh;
	display: grid;
	place-items: center;
}
footer {
	padding: 2rem;
}
ul {
	list-style-type: none;
	padding: 0;
	margin: 0;
	width: 100%;
	display: grid;
	place-items: center;
	gap: 1rem;
}

li {
	width: var(--card-size);
	aspect-ratio: 3 / 1;
	outline: 2px dashed transparent;
}

[data-guides=true] li {
	outline: 2px dashed var(--accent);
}

.wrap {
	pointer-events: none;
	width: var(--card-size);
}

.wrap :where(.translate, .flip, .flop, img) {
	height: 100%;
	width: 100%;
	transform-style: preserve-3d;
	pointer-events: none;
}

img {
	object-fit: cover;
	width: var(--card-size);
	aspect-ratio: 3 / 4;
	border-radius: 12px;
	translate: 0 0;
	transform-style: preserve-3d;
	height: 100%;
}

.flip {
	transform-origin: 50% 100%;
}

.flop {
	transform-origin: 50% 0%;
}

.bear-link {
	color: canvasText;
	position: fixed;
	top: 1rem;
	left: 1rem;
	width: 48px;
	aspect-ratio: 1;
	display: grid;
	place-items: center;
	opacity: 0.8;
}

:where(.x-link, .bear-link):is(:hover, :focus-visible) {
	opacity: 1;
}
.bear-link svg {
	width: 75%;
}

/* TODO: Move the wrap so you get the perspective. Offset the keyframes with negative and positive translation */

@supports (animation-timeline: scroll()) {
	.wrap {
		perspective: max(100vmax, 1200px);
		transform-style: preserve-3d;
		position: fixed;
		top: 50%;
		translate: 0 -50%;
	}
	li {
		view-timeline-name: --item;
		animation: z both linear;
		animation-timeline: view();
		animation-range: contain;
		z-index: calc(50 - var(--index));
	}

	ul {
		gap: 0;
	}

	.translate {
		animation: translate both linear;
		animation-timeline: --item;
	}

	.flip {
		animation: flip both linear;
		animation-timeline: --item;
	}

	.flop {
		animation: flop both linear;
		animation-timeline: --item;
	}

	img {
		filter: saturate(calc(var(--flipped) - var(--flopped)));
		transition: filter 0.2s;
	}
	
	.translate, .flip, .flop {
		animation-range: contain;
	}

	@keyframes flip {
		0%, 45% { rotate: x -90deg; }
		49%, 100% { rotate: x 0deg; }
	}

	@keyframes flop {
		0%, 51% { rotate: x 0deg; }
		55%, 100% { rotate: x 90deg; }
	}

	@keyframes translate {
		0% { translate: 0 50vh; }
		100% { translate: 0 -50vh; }
	}

	/* Custom property version...	*/
	@property --flipped {
		initial-value: 0;
		inherits: true;
		syntax: '<number>';
	}

	@property --flopped {
		initial-value: 0;
		inherits: true;
		syntax: '<number>';
	}

	li {
		animation: z both linear, flip-it both steps(1, end), flop-it both steps(1, end);
		animation-timeline: view();
		animation-range: contain, contain 0% contain 45%, contain 0% contain 55%;
	}

	@keyframes z {
		50% { z-index: 200; }
	}

	/*@keyframes flip-it {
		30%, 100% { --flipped: 1; }
	}
	@keyframes flop-it {
		40%, 100% { --flopped: 1; }
	}*/

	@keyframes flip-it {
		100% { --flipped: 1; }
	}
	@keyframes flop-it {
		100% { --flopped: 1; }
	}

	.flip {
		transition: rotate 0.2s;
		animation: none;
		rotate: x calc((1 - var(--flipped)) * -90deg);
	}

	.flop {
		transition: rotate 0.2s;
		animation: none;
		rotate: x calc(var(--flopped) * 90deg);
	}

	header {
		view-timeline-name: --header;
	}

	h1 {
		animation: float both linear;
		animation-timeline: --header;
		animation-range: exit;
	}

	@keyframes float {
		50%, 100% {
			translate: 0 -4lh;
			opacity: 0;
		}
	}
}

div.tp-dfwv {
	width: 280px;
}