@import "normalize.css";

*,
*:after,
*:before {
	box-sizing: border-box;
}

:root {
	--card-size: clamp(220px, 25vmin + 1rem, 480px);
}

body {
	display: grid;
	place-items: center;
	min-height: 100vh;
	font-family:  "SF Pro Text", "SF Pro Icons", "AOS Icons", "Helvetica Neue", Helvetica, Arial, sans-serif, system-ui;
}

body::before {
	--line: color-mix(in lch, canvasText 25%, transparent);
	--size: 60px;
	content: '';
	height: 100vh;
	width: 100vw;
	position: fixed;
	background: linear-gradient(
				90deg,
				var(--line) 1px,
				transparent 1px var(--size)
			)
			0 -5vmin / var(--size) var(--size),
		linear-gradient(var(--line) 1px, transparent 1px var(--size)) 0 -5vmin / var(
				--size
			) var(--size);
	mask: linear-gradient(-15deg, transparent 60%, white);
	top: 0;
	z-index: -1;
}

header {
	min-height: 80vh;
	display: grid;
	place-items: center;
}

section {
	min-height: 100vh;
	display: grid;
	place-items: center;
}
footer {
	padding: 2rem;
}
ul {
	list-style-type: none;
	padding: 0;
	margin: 0;
	width: 100%;
	display: grid;
	place-items: center;
	gap: 1rem;
}

li {
	width: var(--card-size);
/*	aspect-ratio: 3 / 4;*/
	aspect-ratio: 3 / 1;
	outline: 2px dashed red;
}

.wrap {
	pointer-events: none;
	width: var(--card-size);
}

.wrap :where(.translate, .flip, .flop, img) {
	height: 100%;
	width: 100%;
	transform-style: preserve-3d;
	pointer-events: none;
}

img {
	object-fit: cover;
	width: var(--card-size);
	aspect-ratio: 3 / 4;
/*	transform-origin: 50% 50%;*/
	translate: 0 0;
	transform-style: preserve-3d;
	height: 100%;
}

.flip {
	transform-origin: 50% 100%;
}

.flop {
	transform-origin: 50% 0%;
}

/* TODO: Move the wrap so you get the perspective. Offset the keyframes with negative and positive translation */

@supports (animation-timeline: scroll()) {
	.wrap {
		perspective: max(100vmax, 1200px);
		transform-style: preserve-3d;
		position: fixed;
		top: 50%;
		translate: 0 -50%;
		animation: z both linear;
		animation-timeline: view();
		animation-range: contain;
		z-index: calc(50 - var(--index));
	}
	li {
/*		z-index: var(--index);*/
		view-timeline-name: --item;
/*		transform-style: preserve-3d;*/
	}

	@keyframes z {
		0% { transform: translate3d(0, 0, 0); }
		50%, 100% { transform: translate3d(0, 0, -100vmin); }
/*		50% { z-index: calc(50 + var(--index)); }*/
	}

	ul {
		gap: 0;
	}
	img {
		animation: pop both linear;
		animation-timeline: --item;
	}

	.translate {
		animation: translate both linear;
		animation-timeline: --item;
	}

	.flip {
		animation: flip both linear;
		animation-timeline: --item;
	}

	.flop {
		animation: flop both linear;
		animation-timeline: --item;
	}

	img, .translate, .flip, .flop {
		animation-range: contain;
	}

	@keyframes pop {
		/*0%, 35%, 45%, 100% { transform: translate3d(0, 0, 0); }
		40% { transform: translate3d(0, 0, 50px); }*/
	}

	@keyframes flip {
		0%, 35% { rotate: x -90deg; }
		40%, 100% { rotate: x 0deg; }
	}

	@keyframes flop {
		0%, 40% { rotate: x 0deg; }
		45%, 100% { rotate: x 90deg; }
	}

	@keyframes translate {
		0% { translate: 0 calc(50vh - 50%); }
		40% { translate: 0 0; }
		100% { translate: 0 calc(-50vh - 50%); }
	}

	/* Custom property version...	*/
	@property --flipped {
		initial-value: 0;
		inherits: true;
		syntax: '<number>';
	}

	@property --flopped {
		initial-value: 0;
		inherits: true;
		syntax: '<number>';
	}

	li {
		animation: flip-it both steps(1, end), flop-it both steps(1, end);
		animation-timeline: view();
		animation-range: contain;
	}

	/*@keyframes flip-it {
		30%, 100% { --flipped: 1; }
	}
	@keyframes flop-it {
		36%, 100% { --flopped: 1; }
	}

	.flip {
		transition: rotate 0.2s;
		animation: none;
		rotate: x calc((1 - var(--flipped)) * -90deg);
	}

	.flop {
		transition: rotate 0.2s;
		animation: none;
		rotate: x calc(var(--flopped) * 90deg);
	}
*/
}